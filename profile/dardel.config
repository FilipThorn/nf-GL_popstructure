def cluster = "unknown"

try {
    cluster = ['/bin/bash', '-c', 'sacctmgr show cluster -n | grep -o "^\s*[^ ]*\s*"'].execute().text.trim()
} catch (java.io.IOException e) {
    System.err.println("WARNING: Could not run scluster, defaulting to unknown")
}

conda.useMamba = true

params {
    config_profile_description = 'Profile that works on dardel.pdc.kth'
    //project = 'naiss2024-22-1518'
    project = ''

    max_memory = 1790.GB
    max_cpus = 256
    max_time = 7.d

    schema_ignore_params = "genomes,input_paths,cluster-options,clusterOptions,project,validationSchemaIgnoreParams"
    validationSchemaIgnoreParams = "genomes,input_paths,cluster-options,clusterOptions,project,schema_ignore_params"

}

def clusterOptionsCreator = { mem, time, cpus ->
    String base = "-A $params.project ${params.clusterOptions ?: ''}"

    switch(cluster) {
        case "dardel":
            String extra = ''

            if (time < 7.d && mem <= 111.GB && cpus < 256) {
                extra += ' -p shared '
            }
            else if (time < 1.d) {
                // Shortish
                if (mem > 222.GB) {
                    extra += ' -p memory,main '
                } else {
                    extra += ' -p main '
                }
            } else {
                // Not shortish
                if (mem > 222.GB) {
                    extra += ' -p memory '
                } else {
                    extra += ' -p long '
                }
            }

            if (!mem || mem < 6.GB) {
                // Impose minimum memory if request is below
                extra += ' --mem=6G '
            }

            return base+extra
    }

    return base
}


process {
    resourceLimits = [
        memory: 1790.GB,
        cpus: 256,
        time: 7.d
    ]
    beforeScript = 'module load PDC apptainer'
    executor = 'slurm'
    clusterOptions = { clusterOptionsCreator(task.memory, task.time, task.cpus) }
    cpus = { 7 * task.attempt }
    memory = { 14.GB * task.attempt }
    time = { 4.h * task.attempt }
    errorStrategy = { task.exitStatus in [104, 134, 137, 139, 140, 143, 247] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'

    withLabel: 'RAM_high' {
        cpus = { 24 * task.attempt }
        memory = { 48.GB * task.attempt }
        time = { 12.h * task.attempt }
    }

    withLabel: 'FAST' {
        cpus = { 3 * task.attempt }
        memory = { 6.GB * task.attempt }
        time = { 2.min * task.attempt }
    }
}
